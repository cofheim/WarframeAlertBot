using System;
using System.Collections.Generic;
using System.Linq;
using System.Threading;
using System.Threading.Tasks;
using Microsoft.Extensions.Configuration;
using Microsoft.Extensions.DependencyInjection;
using Microsoft.Extensions.Hosting;
using Microsoft.Extensions.Logging;
using Telegram.Bot;
using Telegram.Bot.Exceptions;
using Telegram.Bot.Types;
using Telegram.Bot.Types.Enums;
using Telegram.Bot.Types.ReplyMarkups;
using Telegram.Bot.Polling;
using WarframeAlertBot.Models;

namespace WarframeAlertBot.Services
{
    public class TelegramBotService : IHostedService
    {
        private readonly TelegramBotClient _botClient;
        private readonly ILogger<TelegramBotService> _logger;
        private readonly IServiceProvider _serviceProvider;
        private readonly ReplyKeyboardMarkup _mainMenu;

        public TelegramBotService(
            TelegramBotClient botClient,
            ILogger<TelegramBotService> logger,
            IServiceProvider serviceProvider)
        {
            _botClient = botClient;
            _logger = logger;
            _serviceProvider = serviceProvider;
            _mainMenu = CreateMainMenu();
        }

        private ReplyKeyboardMarkup CreateMainMenu()
        {
            return new ReplyKeyboardMarkup(new[]
            {
                new[]
                {
                    new KeyboardButton("üö® –ê–ª–µ—Ä—Ç—ã"),
                    new KeyboardButton("‚öîÔ∏è –í—Ç–æ—Ä–∂–µ–Ω–∏—è")
                },
                new[]
                {
                    new KeyboardButton("üåü –ù–∞–π—Ç–≤–µ–π–≤"),
                    new KeyboardButton("üëë –ë–∞—Ä–æ")
                },
                new[]
                {
                    new KeyboardButton("üé≠ –ê—Ä—Ö–æ–Ω—Ç"),
                    new KeyboardButton("üåç –¶–∏–∫–ª—ã")
                },
                new[]
                {
                    new KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"),
                    new KeyboardButton("‚ùì –ü–æ–º–æ—â—å")
                }
            })
            {
                ResizeKeyboard = true
            };
        }

        public async Task StartAsync(CancellationToken cancellationToken)
        {
            try 
            {
                _logger.LogInformation("–ù–∞—á–∞–ª–æ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞...");
                
                var receiverOptions = new ReceiverOptions
                {
                    AllowedUpdates = new[] { UpdateType.Message }
                };
                
                _botClient.StartReceiving(
                    updateHandler: HandleUpdateAsync,
                    errorHandler: HandlePollingErrorAsync,
                    receiverOptions: receiverOptions,
                    cancellationToken: cancellationToken
                );

                var me = await _botClient.GetMeAsync(cancellationToken);
                _logger.LogInformation("–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω: {BotName} (ID: {BotId})", me.Username, me.Id);
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞");
                throw;
            }
        }

        private async Task HandleUpdateAsync(ITelegramBotClient botClient, Update update, CancellationToken cancellationToken)
        {
            try
            {
                _logger.LogInformation(
                    "–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {UpdateId} —Ç–∏–ø–∞ {UpdateType}", 
                    update.Id, 
                    update.Type);

                if (update.Type != UpdateType.Message)
                {
                    _logger.LogInformation("–ü—Ä–æ–ø—É—â–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {UpdateId} —Ç–∏–ø–∞ {UpdateType}", update.Id, update.Type);
                    return;
                }

                if (update.Message?.Text == null)
                {
                    _logger.LogInformation("–ü—Ä–æ–ø—É—â–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞, UpdateId: {UpdateId}", update.Id);
                    return;
                }

                var message = update.Message;
                var userId = message.From?.Id ?? 0;
                
                if (userId == 0)
                {
                    _logger.LogWarning("–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, UpdateId: {UpdateId}", update.Id);
                    return;
                }

                _logger.LogInformation(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è: '{MessageText}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId} –≤ —á–∞—Ç–µ {ChatId}, UpdateId: {UpdateId}",
                    message.Text,
                    userId,
                    message.Chat.Id,
                    update.Id);

                using var scope = _serviceProvider.CreateScope();
                var userService = scope.ServiceProvider.GetRequiredService<UserSettingsService>();
                var warframeService = scope.ServiceProvider.GetRequiredService<WarframeApiService>();

                var command = message.Text.Split(' ')[0].ToLower();
                if (command.StartsWith("/"))
                {
                    _logger.LogInformation(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã '{Command}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}",
                        command,
                        userId);
                        
                    await HandleCommand(message, command, userService, warframeService, cancellationToken);
                }
                else
                {
                    _logger.LogInformation(
                        "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ '{Button}' –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {UserId}",
                        message.Text,
                        userId);
                        
                    await HandleButton(message, userService, warframeService, cancellationToken);
                }
            }
            catch (Exception ex)
            {
                _logger.LogError(ex, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {UpdateId}", update.Id);
                
                if (update.Message?.Chat != null)
                {
                    try 
                    {
                        await _botClient.SendTextMessageAsync(
                            chatId: update.Message.Chat.Id,
                            text: "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∫–æ–º–∞–Ω–¥—ã. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            cancellationToken: cancellationToken);
                    }
                    catch (Exception innerEx)
                    {
                        _logger.LogError(innerEx, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ –≤ —á–∞—Ç {ChatId}", update.Message.Chat.Id);
                    }
                }
            }
        }

        private async Task HandleCommand(Message message, string command, UserSettingsService userService, WarframeApiService warframeService, CancellationToken cancellationToken)
        {
            switch (command)
            {
                case "/start":
                    await HandleStartCommand(message, userService, cancellationToken);
                    break;

                case "/stop":
                    await HandleStopCommand(message, userService, cancellationToken);
                    break;

                case "/addfilter":
                    await HandleAddFilterCommand(message, userService, cancellationToken);
                    break;

                case "/removefilter":
                    await HandleRemoveFilterCommand(message, userService, cancellationToken);
                    break;

                case "/filters":
                    await HandleFiltersCommand(message, userService, cancellationToken);
                    break;

                case "/help":
                    await HandleHelpCommand(message, cancellationToken);
                    break;
            }
        }

        private async Task HandleButton(Message message, UserSettingsService userService, WarframeApiService warframeService, CancellationToken cancellationToken)
        {
            if (message.Chat == null) return;

            var gameState = await warframeService.GetGameStateAsync();
            var response = message.Text switch
            {
                "üö® –ê–ª–µ—Ä—Ç—ã" => FormatAlerts(gameState),
                "‚öîÔ∏è –í—Ç–æ—Ä–∂–µ–Ω–∏—è" => FormatInvasions(gameState),
                "üåü –ù–∞–π—Ç–≤–µ–π–≤" => FormatNightwave(gameState),
                "üëë –ë–∞—Ä–æ" => FormatVoidTrader(gameState),
                "üé≠ –ê—Ä—Ö–æ–Ω—Ç" => FormatArchonHunt(gameState),
                "üåç –¶–∏–∫–ª—ã" => FormatWorldCycles(gameState),
                "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏" => await FormatSettings(message.From?.Id ?? 0, userService),
                "‚ùì –ü–æ–º–æ—â—å" => GetHelpText(),
                _ => null
            };

            if (response != null)
            {
                await _botClient.SendTextMessageAsync(
                    chatId: message.Chat.Id,
                    text: response,
                    cancellationToken: cancellationToken);
            }
        }

        private async Task HandleStartCommand(Message message, UserSettingsService userService, CancellationToken cancellationToken)
        {
            if (message.From == null || message.Chat == null) return;

            var settings = new UserSettings
            {
                TelegramUserId = message.From.Id,
                ChatId = message.Chat.Id.ToString(),
                NotificationsEnabled = true
            };

            await userService.SaveUserSettingsAsync(settings);

            var response = "–ü—Ä–∏–≤–µ—Ç! –Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ Warframe.\n" +
                         "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏.";

            await _botClient.SendMessage(
                chatId: message.Chat.Id,
                text: response,
                replyMarkup: _mainMenu,
                cancellationToken: cancellationToken);
        }

        private string FormatAlerts(GameState state)
        {
            var alerts = state.Events.Where(e => e.Active).ToList();
            if (!alerts.Any())
                return "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∞–ª–µ—Ä—Ç–æ–≤.";

            return "üö® –ê–∫—Ç–∏–≤–Ω—ã–µ –∞–ª–µ—Ä—Ç—ã:\n\n" + string.Join("\n\n", alerts.Select(alert =>
                $"üìç {alert.Node}\n" +
                $"üëæ {alert.Faction}\n" +
                $"üíé –ù–∞–≥—Ä–∞–¥–∞: {alert.Reward}\n" +
                $"‚è∞ –î–æ: {alert.Expiry:HH:mm}"));
        }

        private string FormatInvasions(GameState state)
        {
            if (!state.Invasions.Any())
            {
                _logger.LogInformation("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ç–æ—Ä–∂–µ–Ω–∏–π");
                return "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –≤—Ç–æ—Ä–∂–µ–Ω–∏–π.";
            }

            _logger.LogInformation("–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ {Count} –≤—Ç–æ—Ä–∂–µ–Ω–∏–π", state.Invasions.Count());

            return "‚öîÔ∏è –ê–∫—Ç–∏–≤–Ω—ã–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è:\n\n" + string.Join("\n\n", state.Invasions.Select(invasion =>
            {
                _logger.LogInformation(
                    "–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è:\n" +
                    "Node={Node}\n" +
                    "AttackingFaction={AttackingFaction}\n" +
                    "DefendingFaction={DefendingFaction}\n" +
                    "AttackerReward={AttackerReward}\n" +
                    "DefenderReward={DefenderReward}\n" +
                    "Completion={Completion}",
                    invasion.Node,
                    invasion.AttackingFaction,
                    invasion.DefendingFaction,
                    invasion.AttackerReward,
                    invasion.DefenderReward,
                    invasion.Completion);

                var attackerReward = string.IsNullOrWhiteSpace(invasion.AttackerReward) ? "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã" : invasion.AttackerReward.Trim();
                var defenderReward = string.IsNullOrWhiteSpace(invasion.DefenderReward) ? "–ù–µ—Ç –Ω–∞–≥—Ä–∞–¥—ã" : invasion.DefenderReward.Trim();
                var attackingFaction = string.IsNullOrWhiteSpace(invasion.AttackingFaction) ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : invasion.AttackingFaction.Trim();
                var defendingFaction = string.IsNullOrWhiteSpace(invasion.DefendingFaction) ? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ" : invasion.DefendingFaction.Trim();

                _logger.LogInformation(
                    "–û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è:\n" +
                    "AttackingFaction={AttackingFaction}\n" +
                    "AttackerReward={AttackerReward}\n" +
                    "DefendingFaction={DefendingFaction}\n" +
                    "DefenderReward={DefenderReward}",
                    attackingFaction,
                    attackerReward,
                    defendingFaction,
                    defenderReward);

                return $"üìç {invasion.Node}\n" +
                       $"üîµ {attackingFaction} ({attackerReward})\n" +
                       $"üî¥ {defendingFaction} ({defenderReward})\n" +
                       $"üìä –ü—Ä–æ–≥—Ä–µ—Å—Å: {Math.Abs(invasion.Completion):F1}%";
            }));
        }

        private string FormatNightwave(GameState state)
        {
            if (!state.NightwaveChallenges.Any())
                return "–°–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ù–∞–π—Ç–≤–µ–π–≤.";

            var daily = state.NightwaveChallenges.Where(c => c.IsDaily);
            var weekly = state.NightwaveChallenges.Where(c => !c.IsDaily && !c.IsElite);
            var elite = state.NightwaveChallenges.Where(c => c.IsElite);

            return "üåü –ó–∞–¥–∞–Ω–∏—è –ù–∞–π—Ç–≤–µ–π–≤:\n\n" +
                   FormatChallenges("–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ", daily) +
                   FormatChallenges("–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ", weekly) +
                   FormatChallenges("–≠–ª–∏—Ç–Ω—ã–µ –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω—ã–µ", elite);
        }

        private string FormatChallenges(string title, IEnumerable<NightwaveChallenge> challenges)
        {
            var formatted = challenges.Select(c =>
                $"‚Ä¢ {c.Title} ({c.Standing:N0})\n  {c.Description}\n  ‚è∞ –î–æ: {c.Expiry:g}");
            return $"== {title} ==\n" + string.Join("\n\n", formatted) + "\n\n";
        }

        private string FormatVoidTrader(GameState state)
        {
            if (state.VoidTrader == null)
                return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–∞—Ä–æ –ö–∏'–¢–∏–∏—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.";

            var trader = state.VoidTrader;
            var response = $"üëë –ë–∞—Ä–æ –ö–∏'–¢–∏–∏—Ä\n\n" +
                          $"üìç –õ–æ–∫–∞—Ü–∏—è: {trader.Location}\n";

            if (trader.Active && trader.Inventory.Any())
            {
                response += "\n–¢–æ–≤–∞—Ä—ã:\n" + string.Join("\n", trader.Inventory.Select(item =>
                    $"‚Ä¢ {item.Name} ({item.DucatPrice} –¥—É–∫–∞—Ç, {item.CreditPrice:N0} –∫—Ä)"));
            }
            else
            {
                var arrival = trader.Arrival?.ToLocalTime();
                response += arrival.HasValue
                    ? $"\n‚è∞ –ü—Ä–∏–±—ã—Ç–∏–µ: {arrival:g}"
                    : "\n–í—Ä–µ–º—è –ø—Ä–∏–±—ã—Ç–∏—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ";
            }

            return response;
        }

        private string FormatArchonHunt(GameState state)
        {
            if (state.ArchonHunt == null)
                return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –û—Ö–æ—Ç–µ –Ω–∞ –ê—Ä—Ö–æ–Ω—Ç–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.";

            var hunt = state.ArchonHunt;
            return $"üé≠ –û—Ö–æ—Ç–∞ –Ω–∞ –ê—Ä—Ö–æ–Ω—Ç–∞\n\n" +
                   $"üëë –ë–æ—Å—Å: {hunt.Boss}\n\n" +
                   "–ú–∏—Å—Å–∏–∏:\n" + string.Join("\n", hunt.Missions.Select((m, i) => $"{i + 1}. {m}")) +
                   $"\n\n‚è∞ –î–æ: {hunt.Expiry:g}";
        }

        private string FormatWorldCycles(GameState state)
        {
            if (!state.WorldCycles.Any())
                return "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ü–∏–∫–ª–∞—Ö –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞.";

            var cycles = new Dictionary<string, string>
            {
                ["earthCycle"] = "üåç –ó–µ–º–ª—è",
                ["cetusCycle"] = "üè∞ –¶–µ—Ç—É—Å",
                ["vallisCycle"] = "‚ùÑÔ∏è –î–æ–ª–∏–Ω–∞ –°—Ñ–µ—Ä",
                ["cambionCycle"] = "üî• –ö–∞–º–±–∏–æ–Ω"
            };

            return "–¢–µ–∫—É—â–∏–µ —Ü–∏–∫–ª—ã:\n\n" + string.Join("\n\n", state.WorldCycles.Select(cycle =>
                $"{cycles.GetValueOrDefault(cycle.Key, cycle.Key)}\n" +
                $"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {cycle.Value.State}\n" +
                $"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å: {FormatTimeSpan(cycle.Value.TimeLeft - DateTime.UtcNow)}"));
        }

        private string FormatTimeSpan(TimeSpan? span)
        {
            if (!span.HasValue || span.Value < TimeSpan.Zero)
                return "–≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ";

            return $"{(int)span.Value.TotalHours:D2}:{span.Value.Minutes:D2}:{span.Value.Seconds:D2}";
        }

        private async Task<string> FormatSettings(long userId, UserSettingsService userService)
        {
            var settings = await userService.GetUserSettingsAsync(userId);
            if (settings == null)
                return "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã.";

            return "‚öôÔ∏è –í–∞—à–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n" +
                   $"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {(settings.NotificationsEnabled ? "‚úÖ" : "‚ùå")}\n\n" +
                   "–§–∏–ª—å—Ç—Ä—ã –Ω–∞–≥—Ä–∞–¥:\n" +
                   (settings.RewardFilters.Any()
                       ? string.Join("\n", settings.RewardFilters.Select(f => $"‚Ä¢ {f}"))
                       : "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤");
        }

        private string GetHelpText()
        {
            return "‚ùì –ü–æ–º–æ—â—å\n\n" +
                   "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏:\n\n" +
                   "üö® –ê–ª–µ—Ä—Ç—ã - —Ç–µ–∫—É—â–∏–µ –∞–ª–µ—Ä—Ç—ã\n" +
                   "‚öîÔ∏è –í—Ç–æ—Ä–∂–µ–Ω–∏—è - –∞–∫—Ç–∏–≤–Ω—ã–µ –≤—Ç–æ—Ä–∂–µ–Ω–∏—è\n" +
                   "üåü –ù–∞–π—Ç–≤–µ–π–≤ - –∑–∞–¥–∞–Ω–∏—è –ù–∞–π—Ç–≤–µ–π–≤\n" +
                   "üëë –ë–∞—Ä–æ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ë–∞—Ä–æ –ö–∏'–¢–∏–∏—Ä\n" +
                   "üé≠ –ê—Ä—Ö–æ–Ω—Ç - –û—Ö–æ—Ç–∞ –Ω–∞ –ê—Ä—Ö–æ–Ω—Ç–∞\n" +
                   "üåç –¶–∏–∫–ª—ã - —Ü–∏–∫–ª—ã –¥–Ω—è –∏ –Ω–æ—á–∏\n" +
                   "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏\n\n" +
                   "–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                   "/addfilter [–Ω–∞–≥—Ä–∞–¥–∞] - –¥–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã\n" +
                   "/removefilter [–Ω–∞–≥—Ä–∞–¥–∞] - —É–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã\n" +
                   "/filters - –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã\n" +
                   "/stop - –æ—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è";
        }

        private async Task HandleStopCommand(Message message, UserSettingsService userService, CancellationToken cancellationToken)
        {
            if (message.From == null || message.Chat == null) return;

            var settings = await userService.GetUserSettingsAsync(message.From.Id);
            if (settings != null)
            {
                settings.NotificationsEnabled = false;
                await userService.SaveUserSettingsAsync(settings);

                await _botClient.SendMessage(
                    chatId: message.Chat.Id,
                    text: "–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –∏—Ö —Å–Ω–æ–≤–∞.",
                    cancellationToken: cancellationToken);
            }
        }

        private async Task HandleAddFilterCommand(Message message, UserSettingsService userService, CancellationToken cancellationToken)
        {
            if (message.From == null || message.Chat == null || message.Text == null) return;

            var args = message.Text.Split(' ', 2);
            if (args.Length < 2)
            {
                await _botClient.SendMessage(
                    chatId: message.Chat.Id,
                    text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä. –ù–∞–ø—Ä–∏–º–µ—Ä: /addfilter –ù–∏—Ç–∞–∏–Ω",
                    cancellationToken: cancellationToken);
                return;
            }

            var filter = args[1].Trim();
            await userService.AddRewardFilterAsync(message.From.Id, filter);

            await _botClient.SendMessage(
                chatId: message.Chat.Id,
                text: $"–§–∏–ª—å—Ç—Ä '{filter}' –¥–æ–±–∞–≤–ª–µ–Ω.",
                cancellationToken: cancellationToken);
        }

        private async Task HandleRemoveFilterCommand(Message message, UserSettingsService userService, CancellationToken cancellationToken)
        {
            if (message.From == null || message.Chat == null || message.Text == null) return;

            var args = message.Text.Split(' ', 2);
            if (args.Length < 2)
            {
                await _botClient.SendMessage(
                    chatId: message.Chat.Id,
                    text: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è. –ù–∞–ø—Ä–∏–º–µ—Ä: /removefilter –ù–∏—Ç–∞–∏–Ω",
                    cancellationToken: cancellationToken);
                return;
            }

            var filter = args[1].Trim();
            await userService.RemoveRewardFilterAsync(message.From.Id, filter);

            await _botClient.SendMessage(
                chatId: message.Chat.Id,
                text: $"–§–∏–ª—å—Ç—Ä '{filter}' —É–¥–∞–ª–µ–Ω.",
                cancellationToken: cancellationToken);
        }

        private async Task HandleFiltersCommand(Message message, UserSettingsService userService, CancellationToken cancellationToken)
        {
            if (message.From == null || message.Chat == null) return;

            var settings = await userService.GetUserSettingsAsync(message.From.Id);
            var response = settings?.RewardFilters.Count > 0
                ? $"–í–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã:\n{string.Join("\n", settings.RewardFilters)}"
                : "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.";

            await _botClient.SendMessage(
                chatId: message.Chat.Id,
                text: response,
                cancellationToken: cancellationToken);
        }

        private async Task HandleHelpCommand(Message message, CancellationToken cancellationToken)
        {
            if (message.Chat == null) return;

            var helpText =
                "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
                "/stop - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n" +
                "/addfilter [–Ω–∞–≥—Ä–∞–¥–∞] - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã\n" +
                "/removefilter [–Ω–∞–≥—Ä–∞–¥–∞] - –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –Ω–∞–≥—Ä–∞–¥—ã\n" +
                "/filters - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à–∏ —Ñ–∏–ª—å—Ç—Ä—ã\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ";

            await _botClient.SendMessage(
                chatId: message.Chat.Id,
                text: helpText,
                cancellationToken: cancellationToken);
        }

        private Task HandlePollingErrorAsync(ITelegramBotClient botClient, Exception exception, CancellationToken cancellationToken)
        {
            var errorMessage = exception switch
            {
                ApiRequestException apiRequestException
                    => $"Telegram API Error:\n[{apiRequestException.ErrorCode}]\n{apiRequestException.Message}",
                _ => exception.ToString()
            };

            _logger.LogError(exception, "Error handling polling: {ErrorMessage}", errorMessage);
            return Task.CompletedTask;
        }

        public Task StopAsync(CancellationToken cancellationToken)
        {
            return Task.CompletedTask;
        }
    }
} 